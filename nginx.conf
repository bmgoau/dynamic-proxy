#daemon off;
#user  nginx;

# Optimise for multicore and lots of connections
worker_processes  auto;
worker_cpu_affinity auto;
events {
    worker_connections 1048576;
    multi_accept on;
}
worker_rlimit_nofile 1048576;

# Log errors to stdout
error_log /dev/stdout info;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Set pid
pid /var/run/nginx.pid;

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Log in JSON Format
    log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"body_bytes_sent": $body_bytes_sent, '
    '"request_time": $request_time, '
    '"upstream_connect_time": $upstream_connect_time, '
    '"response_status": $status, '
    '"request": "$request", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referrer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol", '
    '"nginx_access": true }';
    access_log /dev/stdout nginxlog_json;

    server_tokens off; # don't say what version of openresty/nginx we are
    
    # Allow client side keepalives
    keepalive_requests 1000000;
    keepalive_timeout 4000s;

    # Optimise TCP
    tcp_nopush on;
    tcp_nodelay on;
    send_timeout 60;

    # Control client request size and timeouts
    client_max_body_size 20G;
    client_body_buffer_size 2m;
    client_body_timeout 15;
    client_header_timeout 15;

    upstream backend {
        server 0.0.0.1;
        balancer_by_lua_file '/etc/nginx/lua/balancer_by_lua_file.lua';
        keepalive 10000; # allow a lot of keepalove connections. default no keepalives, per worker, not the same as max_conns
        keepalive_requests 1000000; # allow many requests across keepalive connections
        keepalive_timeout 59; # default 60s, must be lower than upstream. Most Cloud vendors have 60 as default, so we choose 59.
    }

    server {
        listen 80 reuseport backlog=65535;

        server_name ~^(?<sanitized_domain>[^:]+):?\d*$; # some clients inject the port in the host header. strip it.

        root /usr/local/openresty/nginx/html;

        # See Move default writable paths to a dedicated directory (#119)
        # https://github.com/openresty/docker-openresty/issues/119
        client_body_temp_path /var/run/openresty/nginx-client-body;
        proxy_temp_path       /var/run/openresty/nginx-proxy;
        fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
        uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
        scgi_temp_path        /var/run/openresty/nginx-scgi;

        location / {
            proxy_pass https://backend$request_uri;
            proxy_buffering off; # disable outgoing response buffering because it should be done by the vtms (??)
            proxy_request_buffering off;
            proxy_buffers 32 512k;
            proxy_buffer_size 16k;

            proxy_set_header Host $sanitized_domain; # Preserve host header
            proxy_set_header Connection keep-alive; # Enable keepalives
            proxy_set_header Upgrade $http_upgrade; # Support websockets?
            proxy_hide_header Strict-Transport-Security; # strip the HSTS header so that HTTP proxying works.

            proxy_http_version 1.1;

            proxy_connect_timeout 5; # wait this long before trying the next ELB node returned by the DNS lookup
            proxy_read_timeout 60;
            proxy_next_upstream_timeout 90; # Do not attempt next_server (retry) in upstream balancer_by_lua if more than 90 seconds have passed
            proxy_send_timeout 60;

            proxy_ssl_server_name on;
            proxy_ssl_name $sanitized_domain; # we need to specify this for SNI to work

            access_by_lua_file '/etc/nginx/lua/access_by_lua_file.lua';
        }
    }

    server {
        listen 443 ssl http2 reuseport backlog=65535;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         ECDH+AESGCM:ECDH+AES256-CBC:ECDH+AES128-CBC:DH+3DES:!ADH:!AECDH:!MD5;
        ssl_certificate     /etc/nginx/certs/one-cert.crt;
        ssl_certificate_key /etc/nginx/certs/one-cert.key;
        ssl_trusted_certificate /etc/nginx/certs/one-cert.crt;
        ssl_session_cache   shared:SSL:40m;
        ssl_session_timeout 4h;
        ssl_session_tickets on;

        server_name ~^(?<sanitized_domain>[^:]+):?\d*$; # some clients inject the port in the host header. strip it.

        root /usr/local/openresty/nginx/html;

        # See Move default writable paths to a dedicated directory (#119)
        # https://github.com/openresty/docker-openresty/issues/119
        client_body_temp_path /var/run/openresty/nginx-client-body;
        proxy_temp_path       /var/run/openresty/nginx-proxy;
        fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
        uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
        scgi_temp_path        /var/run/openresty/nginx-scgi;

        location / {
            proxy_pass https://backend$request_uri;
            proxy_buffering off; # disable outgoing response buffering because it injects delays
            proxy_request_buffering off; # disable request buffering because it injects delays
            proxy_buffers 32 512k;
            proxy_buffer_size 16k;

            proxy_set_header Host $sanitized_domain; # Preserve host header
            proxy_set_header Connection keep-alive; # Enable keepalives
            proxy_set_header Upgrade $http_upgrade; # Support websockets?
            proxy_hide_header Strict-Transport-Security; # strip the HSTS header so that HTTP proxying works.

            proxy_http_version 1.1; # Needed for keepalives to work

            proxy_connect_timeout 5; # wait this long before trying the next node returned by the DNS lookup
            proxy_read_timeout 60;
            proxy_next_upstream_timeout 90; # Do not attempt next_server (retry) in upstream balancer_by_lua if more than 90 seconds have passed
            proxy_send_timeout 60;

            proxy_ssl_server_name on;
            proxy_ssl_name $sanitized_domain; # we need to specify this for SNI to work

            access_by_lua_file '/etc/nginx/lua/access_by_lua_file.lua';
        }
    }
}